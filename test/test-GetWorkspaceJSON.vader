Include: AssertDeepEquals.vader

Execute (vscrib#GetWorkspaceJSON: Setup):
  let g:vscrib = vscrib#New()

Execute (vscrib#GetWorkspaceJSON: Good Current Directory):
  execute 'cd '.g:test_directories.'/good_parent/good_child'
  call g:vscrib.Refresh()
  let g:actual = g:vscrib.GetWorkspaceJSON('launch.json')
Then:
  let g:expected = {
      \ 'version': '0.2.0',
      \ 'configurations': [
      \ {
        \ 'type': 'node',
        \ 'request': 'launch',
        \ 'name': 'Launch Program, Good Parent, Good Child',
        \ 'program': '${workspaceFolder}\build\src\index.js',
        \ 'preLaunchTask': 'tsc: build - tsconfig.json',
        \ 'outFiles': [
          \ '${workspaceFolder}/build/**/*.js'
        \ ]
      \ }
      \ ]
    \ }
  call AssertDeepEquals(g:expected, g:actual)

Execute (vscrib#GetWorkspaceJSON: Empty Current, Good Parent):
  execute 'cd '.g:test_directories.'/good_parent/empty_child'
  call g:vscrib.Refresh()
  let g:actual = g:vscrib.GetWorkspaceJSON('launch.json')
Then:
  let g:expected = {
      \ 'version': '0.2.0',
      \ 'configurations': [
      \ {
        \ 'type': 'node',
        \ 'request': 'launch',
        \ 'name': 'Launch Program, Good Parent',
        \ 'program': '${workspaceFolder}\build\src\index.js',
        \ 'preLaunchTask': 'tsc: build - tsconfig.json',
        \ 'outFiles': [
          \ '${workspaceFolder}/build/**/*.js'
        \ ]
      \ }
      \ ]
    \ }
  call AssertDeepEquals(g:expected, g:actual)

Execute (vscrib#GetWorkspaceJSON: Bad Current, Empty Parent, Good Grandparent):
  execute 'cd '.g:test_directories.'/good_grandparent/empty_parent/bad_child'
  call g:vscrib.Refresh()
  let g:actual = g:vscrib.GetWorkspaceJSON('launch.json')
Then:
  let g:expected = {
      \ 'version': '0.2.0',
      \ 'configurations': [
      \ {
        \ 'type': 'node',
        \ 'request': 'launch',
        \ 'name': 'Launch Program, Good Grandparent',
        \ 'program': '${workspaceFolder}\build\src\index.js',
        \ 'preLaunchTask': 'tsc: build - tsconfig.json',
        \ 'outFiles': [
          \ '${workspaceFolder}/build/**/*.js'
        \ ]
      \ }
      \ ]
    \ }
  call AssertDeepEquals(g:expected, g:actual)

Execute (vscrib#GetWorkspaceJSON: No launch.json To Be Found):
  execute 'cd '.g:test_directories.'/empty_grandparent/empty_parent/empty_child'
  " hardcode the workspace folder, since FindWorkspace would also fail
  let g:vars = g:vscrib.GetVariables(v:true)
  let g:vars['workspaceFolder'] = 
      \ g:test_directories.'/empty_grandparent/empty_parent/empty_child'
Then:
  AssertThrows call g:vscrib.GetWorkspaceJSON('launch.json')
  AssertEqual 0, match(g:vader_exception, '^ERROR(NotFound)'), 
      \ 'Threw wrong exception: '.g:vader_exception

Execute (vscrib#GetWorkspaceJSON: Clean Up):
  execute 'cd '.g:test_dir
