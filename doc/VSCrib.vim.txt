*VSCrib.vim.txt*	Crib project infrastructure from VSCode.
Yilin Yang <yiliny@umich.edu>                        *VSCrib.vim* *VSCrib.vim*

==============================================================================
CONTENTS                                                 *VSCrib.vim-contents*
  1. Introduction...........................................|VSCrib.vim-intro|
  2. Dictionaries...........................................|VSCrib.vim-dicts|
  3. Functions..........................................|VSCrib.vim-functions|

==============================================================================
INTRODUCTION                                                *VSCrib.vim-intro*

A VimL library for for cribbing project infrastructure used by VSCode and
twisting it to one's own nefarious ends.

The primary purpose of this plugin is to locate `.vscode` folders and the JSON
configuration files held within. This allows for a limited degree of 'letting
vim pretend to be VSCode' for the purposes of writing plugins.

==============================================================================
DICTIONARIES                                                *VSCrib.vim-dicts*

                                                           *VSCrib.vim.VSCrib*
A "cribbed" VSCode working "state", encompassing an active workspace.

This encapsulation in an object (as opposed to a "purely functional" approach)
is meant to prevent concurrency issues arising from multiple plugins using
VSCrib at the same time.

If VSCrib.vim had a *single* global state (of workspace variables, etc.), then
that state could be clobbered by calls to |SetVariables()| made by other
plugins; e.g. if one plugin wants to update the active workspace only when the
user `cd`s into another directory, while another wants to update whenever the
user opens a new file, then one plugin could overwrite the shared workspace
state 'while the other wasn't looking.'

To avoid this, VSCrib.vim's interface is tied to a VSCrib OBJECT: the "state"
of the workspace is fully contained by this object. So the two plugins
mentioned above would have two DIFFERENT objects, with two independently
modifiable states, and neither would have to consider the other's existence.

VSCrib.FindWorkspace({search_from})                   *VSCrib.FindWorkspace()*
  Search upwards from the current directory to find a `.vscode` folder,
  returning the absolute filepath of the folder containing `.vscode` if found,
  without trailing slash.

  {search_from} should be an absolute filepath to a directory.
  Throws ERROR(BadValue) If {search_from} isn't an absolute path.
  Throws ERROR(NotFound) If a `.vscode` folder could not be found.
  Throws ERROR(WrongType) If {search_from} isn't a string.

VSCrib.Refresh([relative_to], [vscode_exe])                 *VSCrib.Refresh()*
  Updates the VSCode task/debugging variables cache, searching from the given
  directory (by default, the current working directory).

  [relative_to] is an absolute path to a directory, from which to start
  searching for a `.vscode` folder. [vscode_exe]  is an absolute path to a
  VSCode executable, or garbage.

  [relative_to] is getcwd() if omitted.
  [vscode_exe] is '/NO_VSCODE_EXE_SPECIFIED' if omitted.
  Throws ERROR(NotFound) If no VSCode workspace folder could be found.
  Throws ERROR(WrongType) If [relative_to] or [vscode_exe ]aren't strings.
  Throws ERROR(BadValue) If [relative_to] or [vscode_exe] aren't a directory
  and a file, respectively; or if either is not an absolute filepath.

VSCrib.GetVariables([mutable])                         *VSCrib.GetVariables()*
  Returns the currently cached VSCode task/debugging variables; if [mutable]
  is true, returns a mutable reference to the cache instead of a deep copy.
  Throws ERROR(WrongType) If [mutable] is not a boolean value.

VSCrib.GetWorkspaceJSON({filename}, [workspace_folder])
                                                   *VSCrib.GetWorkspaceJSON()*
  Return the nearest JSON file with named {filename} that can be found in a
  `.vscode` directory, parsed into a dictionary, searching from the cached
  workspace folder, e.g. if {filename} is 'launch.json', search for
  `.vscode/launch.json` in the current workspace directory or in its parent
  directories.

  If the JSON file can't be found in the current workspace folder, will search
  up to find the closest parent directory containing the requested file in a
  `.vscode` directory. If one is found, but it cannot be read or parsed, will
  continue searching upwards into parent directories.

  [workspace_folder] is the cached value of 'workspaceFolder' if omitted.
  Throws ERROR(NotFound) If no workspace folder is currently set; or if the
  requested file could be found in the current workspace folder, or any of its
  parent directories.

VSCrib.Substitute({line}, [ignore_unrecognized], [no_interactive],
  [no_inputsave])                                        *VSCrib.Substitute()*
  Perform VSCode's task/debugging variable substitution on {line} using cached
  variables and return it.

  As of the time of writing, this function does NOT support substitution of
  VSCode settings and commands, e.g. `${config:editor.fontSize}` or
  `${command.explorer.newFolder}`. Attempted substitution of these variables
  will produce errors, unless [ignore_unrecognized] is true.

  VSCode normally offers "input" variables (see:
  https://code.visualstudio.com/docs/editor/variables-reference) that allow
  tasks and launch configurations to prompt for user input, e.g. for the name
  of the executable to debug. This function offers limited support for user
  input: variables of the form `${prompt:Message goes here}` will, if
  [no_interactive] is set to false, prompt the user for input using vim's
  `input()` function. (In this case, the prompt would be: 'Message goes here:
  <CURSOR>'.)

  Does not invoke `inputsave()` or `inputrestore()` if [no_inputsave] is set
  to true. This is useful when automatically supplying answers to interactive
  user prompts, e.g. when writing test cases for this function.

  [ignore_unrecognized] is v:true if omitted.
  [no_interactive] is v:false if omitted.
  [no_inputsave] is v:false if omitted.
  Throws ERROR(WrongType) If {line} is not a string.
  Throws ERROR(BadValue) If the line contains malformed variables, OR if the
  line contains unrecognized variables and [ignore_unrecognized] is false, OR
  if [no_interactive] is set to true and dynamic variables that prompt for
  user input are in the string, OR if the given line contains newline
  characters or carriage returns.

==============================================================================
FUNCTIONS                                               *VSCrib.vim-functions*

vscrib#New()                                                    *vscrib#New()*
  Create a |VSCrib.vim.VSCrib| object.

vscrib#StripComments({line})                          *vscrib#StripComments()*
  Remove inline comments (e.g. `// this sort of comment`) from the given
  string, if present, and return it.
  Throws ERROR(WrongType) If not given a string.
  Throws ERROR(BadValue) If the given string contains newlines or carriage
  returns.


vim:tw=78:ts=8:ft=help:norl:
