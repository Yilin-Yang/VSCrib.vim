*VSCrib.vim.txt*	Crib project infrastructure from VSCode.
Yilin Yang <yiliny@umich.edu>                        *VSCrib.vim* *VSCrib.vim*

==============================================================================
CONTENTS                                                 *VSCrib.vim-contents*
  1. Introduction...........................................|VSCrib.vim-intro|
  2. Functions..........................................|VSCrib.vim-functions|

==============================================================================
INTRODUCTION                                                *VSCrib.vim-intro*

A VimL library for for cribbing project infrastructure used by VSCode and
twisting it to one's own nefarious ends.

The primary purpose of this plugin is to locate `.vscode` folders and the JSON
configuration files held within. This allows for a limited degree of 'letting
vim pretend to be VSCode' for the purposes of writing plugins.

==============================================================================
FUNCTIONS                                               *VSCrib.vim-functions*

vscrib#FindWorkspace({search_from})                   *vscrib#FindWorkspace()*
  Search upwards from the current directory to find a `.vscode` folder,
  returning the absolute filepath of the folder containing `.vscode` if found,
  without trailing slash.

  {search_from} should be an absolute filepath to a directory.
  Throws ERROR(BadValue) If {search_from} isn't an absolute path.
  Throws ERROR(NotFound) If a `.vscode` folder could not be found.
  Throws ERROR(WrongType) If {search_from} isn't a string.

vscrib#SetVariables([relative_to], [vscode_exe])       *vscrib#SetVariables()*
  Updates the VSCode task/debugging variables cache, searching from the given
  directory (by default, the current working directory). Returns a deep copy
  of the updated cache.

  [relative_to] is an absolute path to a directory, from which to start
  searching for a `.vscode` folder. [vscode_exe]  is an absolute path to a
  VSCode executable, or garbage.

  [relative_to] is getcwd() if omitted.
  [vscode_exe] is 'NO_VSCODE_EXE_SPECIFIED' if omitted.
  Throws ERROR(NotFound) If no VSCode workspace folder could be found.
  Throws ERROR(WrongType) If [relative_to] or [vscode_exe ]aren't strings.
  Throws ERROR(BadValue) If [relative_to] or [vscode_exe] aren't a directory
  and a file, respectively; or if either is not an absolute filepath.

vscrib#GetVariables([mutable])                         *vscrib#GetVariables()*
  Returns the currently cached VSCode task/debugging variables; if [mutable]
  is true, returns a mutable reference to the cache instead of a deep copy.
  Throws ERROR(WrongType) If [mutable] is not a boolean value.

vscrib#StripComments({line})                          *vscrib#StripComments()*
  Remove inline comments (e.g. `// this sort of comment`) from the given
  string, if present, and return it.
  Throws ERROR(WrongType) If not given a string.
  Throws ERROR(BadValue) If the given string contains newlines or carriage
  returns.

vscrib#GetLaunchJSON([workspace_folder])              *vscrib#GetLaunchJSON()*
  Return the nearest `launch.json` file, parsed into a dictionary, searching
  from [workspace_folder].

  If no `launch.json` file is found in the current workspace folder, will
  search up to find the closest parent directory containing a
  `.vscode/launch.json` file. If a `launch.json` file is found, but it cannot
  be read or parsed, will continue searching upwards into parent directories.

  [workspace_folder] is The cached value of 'workspaceFolder'. if omitted.
  Throws ERROR(NotFound) If no workspace folder is currently set; or if no
  `launch.json` file could be found in the current workspace folder, or any of
  its parent directories.

vscrib#Substitute({line}, [variables], [ignore_unrecognized],
  [no_interactive], [no_inputsave])                      *vscrib#Substitute()*
  Perform VSCode's task/debugging variable substitution on {line} and return
  it.

  Uses currently cached variables if [variables] is an empty dictionary;
  otherwise, uses the dictionary given. This should be a dictionary returned
  by a call to |SetVariables()| or |GetVariables()|.

  As of the time of writing, this function does NOT support substitution of
  VSCode settings and commands, e.g. `${config:editor.fontSize}` or
  `${command.explorer.newFolder}`. Attempted substitution of these variables
  will produce errors, unless [ignore_unrecognized] is true.

  VSCode normally offers 'input' variables (see:
  https://code.visualstudio.com/docs/editor/variables-reference) that allow
  tasks and launch configurations to prompt for user input, e.g. for the name
  of the executable to debug. This function offers limited support for user
  input: variables of the form `${prompt:Message goes here}` will, if
  [no_interactive] is set to false, prompt the user for input using vim's
  `input()` function. (In this case, the prompt would be: 'Message goes here:
  <CURSOR>', with `<CURSOR>` being the position of the user's cursor.)

  Does not invoke `inputsave()` or `inputrestore()` if [no_inputsave] is set
  to true. This is useful when automatically supplying answers to interactive
  user prompts, e.g. in writing test cases for this function.

  [ignore_unrecognized] is v:true if omitted.
  [no_interactive] is v:false if omitted.
  [no_inputsave] is v:false if omitted.
  Throws ERROR(WrongType) If {line} is not a string.
  Throws ERROR(BadValue) If the line contains malformed variables, OR if the
  line contains unrecognized variables and [ignore_unrecognized] is false, OR
  if [no_interactive] is set to true and dynamic variables that prompt for
  user input are in the string, OR if the given line contains newline
  characters or carriage returns.


vim:tw=78:ts=8:ft=help:norl:
